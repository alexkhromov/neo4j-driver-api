CREATE DATABASE IF NOT EXISTS FN;

USE FN;

CREATE TABLE IF NOT EXISTS FRIEND (
    ID INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS FRIENDS (
  FRIEND_OF INT NOT NULL,
  FRIEND_TO INT NOT NULL,
  PRIMARY KEY (FRIEND_OF, FRIEND_TO),
  CONSTRAINT FK_FRIEND_1 FOREIGN KEY (FRIEND_OF) REFERENCES FRIEND (ID),
  CONSTRAINT FK_FRIEND_2 FOREIGN KEY (FRIEND_TO) REFERENCES FRIEND (ID)
);

DROP PROCEDURE IF EXISTS insert_test_data;

DELIMITER #
CREATE PROCEDURE insert_test_data()
BEGIN
    DECLARE FRIEND_COUNT_CURRENT INT UNSIGNED DEFAULT 1;
    DECLARE LAST_FRIEND_F1_ID INT UNSIGNED;
    DECLARE LAST_FRIEND_F2_ID INT UNSIGNED;
    -- SET @NAMES_SOURCE = 'Michelle,Tanya,Julie,Christie,Sophie,Amanda,Khloe,Sarah,Kaylee,Jennifer,';
    SET @NAMES_SOURCE = 'Michelle,Tanya,Julie,';
    SET @NAMES_CURRENT_F1 = @NAMES_SOURCE;
    SET @NAMES_CURRENT_F2 = @NAMES_SOURCE;
    SET @NAMES_CURRENT_F3 = @NAMES_SOURCE;
    SET @NAMES_CURRENT_F4 = @NAMES_SOURCE;
    SET @NAMES_CURRENT_F5 = @NAMES_SOURCE;
    --  DECLARE FRIEND_COUNT INT UNSIGNED DEFAULT 10;
    -- DECLARE FRIEND_COUNT INT UNSIGNED DEFAULT 3;

    SET FOREIGN_KEY_CHECKS = 0;
    TRUNCATE TABLE FRIEND;
    TRUNCATE TABLE FRIENDS;
    SET FOREIGN_KEY_CHECKS = 1;

    WHILE (LOCATE(',', @NAMES_CURRENT_F1) > 0) DO
        START TRANSACTION;
        SET @NAME_CURRENT_F1 = SUBSTRING(@NAMES_CURRENT_F1, 1, LOCATE(',', @NAMES_CURRENT_F1) - 1);
        SET @NAMES_CURRENT_F1= SUBSTRING(@NAMES_CURRENT_F1, LOCATE(',', @NAMES_CURRENT_F1) + 1);
        INSERT INTO FRIEND (NAME) VALUES (CONCAT(@NAME_CURRENT_F1, FRIEND_COUNT_CURRENT));
        SET LAST_FRIEND_F1_ID = LAST_INSERT_ID();
        WHILE (LOCATE(',', @NAMES_CURRENT_F2) > 0) DO
            SET @NAME_CURRENT_F2 = SUBSTRING(@NAMES_CURRENT_F2, 1, LOCATE(',', @NAMES_CURRENT_F2) - 1);
            SET @NAMES_CURRENT_F2 = SUBSTRING(@NAMES_CURRENT_F2, LOCATE(',', @NAMES_CURRENT_F2) + 1);
            INSERT INTO FRIEND (NAME) VALUES (CONCAT(@NAME_CURRENT_F2, FRIEND_COUNT_CURRENT, '-', FRIEND_COUNT_CURRENT));
            SET LAST_FRIEND_F2_ID = LAST_INSERT_ID();
            INSERT INTO FRIENDS (FRIEND_OF, FRIEND_TO) VALUES (LAST_FRIEND_F1_ID, LAST_FRIEND_F2_ID);
        END WHILE;
        SET @NAMES_CURRENT_F2 = @NAMES_SOURCE;
        SET FRIEND_COUNT_CURRENT = FRIEND_COUNT_CURRENT + 1;
        COMMIT;
    END WHILE;

    INSERT INTO FRIENDS (FRIEND_OF, FRIEND_TO)
        SELECT FRIEND_OF.ID, FRIEND_TO.ID FROM FRIEND AS FRIEND_OF, FRIEND AS FRIEND_TO
        WHERE REGEXP_LIKE(FRIEND_OF.NAME, '[a-zA-Z]*[0-9]*') AND
              REGEXP_LIKE(FRIEND_TO.NAME, '[a-zA-Z]*[0-9]*')
        AND FRIEND_OF.NAME NOT LIKE FRIEND_TO.NAME AND FRIEND_OF.ID < FRIEND_TO.ID;

    INSERT INTO FRIENDS (FRIEND_OF, FRIEND_TO)
        SELECT FRIEND_OF.ID, FRIEND_TO.ID FROM FRIEND AS FRIEND_OF, FRIEND AS FRIEND_TO
        WHERE REGEXP_LIKE(FRIEND_OF.NAME, '[a-zA-Z]*[0-9]*-[0-9]*') AND
              REGEXP_LIKE(FRIEND_TO.NAME, '[a-zA-Z]*[0-9]*-[0-9]*')
        AND FRIEND_OF.NAME NOT LIKE FRIEND_TO.NAME AND FRIEND_OF.ID < FRIEND_TO.ID;
END #

CALL insert_test_data();