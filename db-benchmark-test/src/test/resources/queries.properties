###Queries for mobile network###
#Count 4G sectors with azimuth 0 for each controller
neo4j.query.mn = MATCH (c:Controller) - [:HAS_LOCATION] -> (l:LocationArea) - [:HAS_CELL] -> \
                 (ce:Cell) - [:HAS_SECTOR] -> (s:Sector{type:'4G', azimuth:'0'}) \
                 RETURN c.name AS NAME, count(s) AS COUNT

mysql.query.mn = SELECT C.NAME, COUNT(S.SECTOR_ID) FROM CONTROLLER AS C \
                 INNER JOIN LOCATION_AREA AS LA ON C.CONTROLLER_ID = LA.CONTROLLER_ID \
                 INNER JOIN CELL AS CE ON LA.LOCATION_AREA_ID = CE.LOCATION_AREA_ID \
                 INNER JOIN SECTOR S ON CE.CELL_ID = S.CELL_ID \
                 WHERE S.TYPE = '4G' AND S.AZIMUTH = 0 \
                 GROUP BY C.NAME

###Queries for friends network###
#find user friends who knows each other
neo4j.query.fn.1 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c), (a) - [:FRIEND_OF] - (c) \
                   WHERE a.name = 'Michelle1' AND id(b) < id(c) \
                   RETURN id(b) AS FRIEND_OF_ID, id(c) AS FRIEND_TO_ID, \
                   b.name AS FRIEND_OF_NAME, c.name AS FRIEND_TO_NAME

mysql.query.fn.1 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ) \
                   SELECT FF.FRIEND_OF AS FRIEND_OF_ID, FF.FRIEND_TO AS FRIEND_TO_ID, \
                   F_OF.NAME AS FRIEND_OF_NAME, F_TO.NAME AS FRIEND_TO_NAME FROM FRIENDS FF \
                   INNER JOIN FRIEND AS F_OF ON F_OF.ID = FF.FRIEND_OF \
                   INNER JOIN FRIEND AS F_TO ON F_TO.ID = FF.FRIEND_TO \
                   WHERE FF.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS) \
                   AND FF.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS)