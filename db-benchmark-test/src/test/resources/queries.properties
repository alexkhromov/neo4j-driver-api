###Queries for mobile network###
#MNTestGroup - count 4G sectors with azimuth 0 for each controller
neo4j.query.mn = MATCH (c:Controller) - [:HAS_LOCATION] -> (l:LocationArea) - [:HAS_CELL] -> \
                 (ce:Cell) - [:HAS_SECTOR] -> (s:Sector{type:'4G', azimuth:'0'}) \
                 RETURN c.name AS NAME, count(s) AS COUNT

mysql.query.mn = SELECT C.NAME, COUNT(S.SECTOR_ID) FROM CONTROLLER AS C \
                 INNER JOIN LOCATION_AREA AS LA ON C.CONTROLLER_ID = LA.CONTROLLER_ID \
                 INNER JOIN CELL AS CE ON LA.LOCATION_AREA_ID = CE.LOCATION_AREA_ID \
                 INNER JOIN SECTOR S ON CE.CELL_ID = S.CELL_ID \
                 WHERE S.TYPE = '4G' AND S.AZIMUTH = 0 \
                 GROUP BY C.NAME

###Queries for friends network###
#FNTestGroup_1 - find user friends who knows each other
neo4j.query.fn.1 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c), (a) - [:FRIEND_OF] - (c) \
                   WHERE a.name = 'Michelle1' AND id(b) < id(c) \
                   RETURN id(b) AS FRIEND_OF_ID, id(c) AS FRIEND_TO_ID, \
                   b.name AS FRIEND_OF_NAME, c.name AS FRIEND_TO_NAME

mysql.query.fn.1 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ) \
                   SELECT FF.FRIEND_OF AS FRIEND_OF_ID, FF.FRIEND_TO AS FRIEND_TO_ID, \
                   F_OF.NAME AS FRIEND_OF_NAME, F_TO.NAME AS FRIEND_TO_NAME FROM FRIENDS FF \
                   INNER JOIN FRIEND AS F_OF ON F_OF.ID = FF.FRIEND_OF \
                   INNER JOIN FRIEND AS F_TO ON F_TO.ID = FF.FRIEND_TO \
                   WHERE FF.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS) \
                   AND FF.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS)

#FNTestGroup_2 - find friends of user friends who is not yet knows user
neo4j.query.fn.2 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c) \
                   WHERE a.name = 'Michelle1' AND NOT (a) - [:FRIEND_OF] - (c) \
                   RETURN id(c) AS ID, c.name AS NAME
#                  or
#                  MATCH (a:Friend) - [:FRIEND_OF*2] - (c)
#                  WHERE a.name = 'Michelle1' and a <> c AND NOT (a) - [:FRIEND_OF] - (c)
#                  RETURN id(c) AS ID, c.name AS NAME

mysql.query.fn.2 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ) \
                   SELECT F.* FROM ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS) \
                   ) AS ALL_FF_IDS LEFT JOIN FRIEND F ON F.ID = ALL_FF_IDS.FRIEND_ID \
                   WHERE FRIEND_ID NOT IN (SELECT * FROM ALL_FRIENDS_IDS) \
                   AND FRIEND_ID NOT IN (SELECT ID FROM GIVEN_ID)

#FNTestGroup_3 - find friends of*3-level friends of user friends who is not yet knows user
neo4j.query.fn.3 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c) - [:FRIEND_OF] - (d) \
                   WHERE a.name = 'Michelle1' AND NOT (a) - [:FRIEND_OF] - (c) AND NOT (b) - [:FRIEND_OF] - (d) \
                   RETURN distinct(id(d)) AS ID, d.name AS NAME order by ID

mysql.query.fn.3 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS_LEVEL_1 AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_2 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                   ) \
                   SELECT F.* FROM ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                   ) AS ALL_FF_IDS LEFT JOIN FRIEND F ON F.ID = ALL_FF_IDS.FRIEND_ID \
                   WHERE FRIEND_ID NOT IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                   AND FRIEND_ID NOT IN (SELECT ID FROM GIVEN_ID)

#FNTestGroup_4 - find friends of*4-level friends of user friends who is not yet knows user
neo4j.query.fn.4 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c) - [:FRIEND_OF] - (d) - [:FRIEND_OF] - (e) \
                   WHERE a.name = 'Michelle1' AND NOT (a) - [:FRIEND_OF] - (c) AND NOT (b) - [:FRIEND_OF] - (d) \
                   AND NOT (c) - [:FRIEND_OF] - (e) \
                   RETURN distinct(id(e)) AS ID, e.name AS NAME order by ID

mysql.query.fn.4 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS_LEVEL_1 AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_2 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_3 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                   ) \
                   SELECT F.* FROM ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_3) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_3) \
                   ) AS ALL_FF_IDS LEFT JOIN FRIEND F ON F.ID = ALL_FF_IDS.FRIEND_ID \
                   WHERE FRIEND_ID NOT IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_3) \
                   AND FRIEND_ID NOT IN (SELECT ID FROM GIVEN_ID)

#FNTestGroup_5 - find friends of*5-level friends of user friends who is not yet knows user
neo4j.query.fn.5 = MATCH (a:Friend) - [:FRIEND_OF] - (b) - [:FRIEND_OF] - (c) - [:FRIEND_OF] - (d) \
                   - [:FRIEND_OF] - (e) - [:FRIEND_OF] - (f) \
                   WHERE a.name = 'Michelle1' AND NOT (a) - [:FRIEND_OF] - (c) AND NOT (b) - [:FRIEND_OF] - (d) \
                   AND NOT (c) - [:FRIEND_OF] - (e) AND NOT (d) - [:FRIEND_OF] - (f) \
                   RETURN distinct(id(f)) AS ID, e.name AS NAME order by ID

mysql.query.fn.5 = WITH GIVEN_ID AS (SELECT ID FROM FRIEND AS F WHERE F.NAME = 'Michelle1'), \
                   ALL_FRIENDS_IDS_LEVEL_1 AS ( \
                       SELECT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF = (SELECT ID FROM GIVEN_ID) \
                           UNION ALL \
                       SELECT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO = (SELECT ID FROM GIVEN_ID) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_2 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_1) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_3 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_2) \
                   ), \
                   ALL_FRIENDS_IDS_LEVEL_4 AS ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_3) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_3) \
                   ) \
                   SELECT F.* FROM ( \
                       SELECT DISTINCT FS1.FRIEND_TO AS FRIEND_ID FROM FRIENDS AS FS1 \
                       WHERE FS1.FRIEND_OF IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_4) \
                           UNION ALL \
                       SELECT DISTINCT FS2.FRIEND_OF AS FRIEND_ID FROM FRIENDS AS FS2 \
                       WHERE FS2.FRIEND_TO IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_4) \
                   ) AS ALL_FF_IDS LEFT JOIN FRIEND F ON F.ID = ALL_FF_IDS.FRIEND_ID \
                   WHERE FRIEND_ID NOT IN (SELECT * FROM ALL_FRIENDS_IDS_LEVEL_4) \
                   AND FRIEND_ID NOT IN (SELECT ID FROM GIVEN_ID)

#FNTestGroup_6 - count all friendships between all Michelle's and Tanya's
neo4j.query.fn.6 = MATCH (a:Friend) - [f:FRIEND_OF] - (b) \
                   WHERE a.name STARTS WITH 'Michelle' AND b.name STARTS WITH 'Tanya' \
                   RETURN count(f)

mysql.query.fn.6 = WITH ALL_MICHELLE_IDS AS ( \
                       SELECT F.ID AS FRIEND_ID FROM FRIEND AS F WHERE NAME LIKE 'Michelle%' \
                   ), \
                   ALL_TANYA_IDS AS ( \
                       SELECT F.ID AS FRIEND_ID FROM FRIEND AS F WHERE NAME LIKE 'Tanya%' \
                   ) \
                   SELECT COUNT(*) FROM FRIENDS AS FF \
                   WHERE FF.FRIEND_OF IN (SELECT * FROM ALL_MICHELLE_IDS) AND FF.FRIEND_TO IN (SELECT * FROM ALL_TANYA_IDS) \
                   OR \
                   FF.FRIEND_OF IN (SELECT * FROM ALL_TANYA_IDS) AND FF.FRIEND_TO IN (SELECT * FROM ALL_MICHELLE_IDS)

#FNTestGroup_7 - find user friends who friends only with user and user have more than 1 friend
neo4j.query.fn.7 = MATCH (a:Friend) - [:FRIEND_OF] - (b) \
                   WHERE size((a) -- ()) > 1 AND size((b) -- ()) = 1 \
                   RETURN count(b) AS COUNT
#                  RETURN a, b
#                  RETURN id(a) AS FRIEND_OF_ID, id(b) AS FRIEND_TO_ID,
#                  a.name AS FRIEND_OF_NAME, b.name AS FRIEND_TO_NAME

mysql.query.fn.7 = WITH ALL_FRIENDS_COUNT AS ( \
                       SELECT FRIEND_ID, SUM(COUNT) AS COUNT FROM ( \
                           SELECT FS1.FRIEND_OF AS FRIEND_ID, COUNT(FS1.FRIEND_TO) AS COUNT FROM FRIENDS AS FS1 \
                           GROUP BY FS1.FRIEND_OF \
                               UNION ALL \
                           SELECT FS2.FRIEND_TO AS FRIEND_ID, COUNT(FS2.FRIEND_OF) AS COUNT FROM FRIENDS AS FS2 \
                           GROUP BY FS2.FRIEND_TO \
                       ) AS ALL_FF_COUNT GROUP BY FRIEND_ID \
                   ), \
                   FRIENDS_WITH_ONE_FRIEND AS ( \
                       SELECT FRIEND_ID FROM ALL_FRIENDS_COUNT \
                       WHERE COUNT = 1 \
                   ), \
                   FRIENDS_WITH_MORE_THAN_ONE_FRIEND AS ( \
                       SELECT FRIEND_ID FROM ALL_FRIENDS_COUNT \
                       WHERE COUNT > 1 \
                   ) \
                   SELECT COUNT(*) AS COUNT FROM FRIENDS FF \
                   INNER JOIN FRIEND AS F_OF ON F_OF.ID = FF.FRIEND_OF \
                   INNER JOIN FRIEND AS F_TO ON F_TO.ID = FF.FRIEND_TO \
                   WHERE \
                   (FF.FRIEND_OF IN (SELECT FRIEND_ID FROM FRIENDS_WITH_ONE_FRIEND) \
                   AND FF.FRIEND_TO IN (SELECT FRIEND_ID FROM FRIENDS_WITH_MORE_THAN_ONE_FRIEND)) \
                   OR \
                   (FF.FRIEND_TO IN (SELECT FRIEND_ID FROM FRIENDS_WITH_ONE_FRIEND) \
                   AND FF.FRIEND_OF IN (SELECT FRIEND_ID FROM FRIENDS_WITH_MORE_THAN_ONE_FRIEND))
#                  SELECT FF.FRIEND_OF AS FRIEND_OF_ID, FF.FRIEND_TO AS FRIEND_TO_ID,
#                  F_OF.NAME AS FRIEND_OF_NAME, F_TO.NAME AS FRIEND_TO_NAME FROM FRIENDS FF